# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: read

jobs:

  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    defaults:
      run:
        working-directory: ./example-app
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        pip install --upgrade sqlalchemy psycopg2

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        virtualenvs-create: true

    - name: Cache venv
      id: cache-venv
      uses: actions/cache@v2
      with:
        path: /home/runner/.cache/pypoetry/virtualenvs
        key: ${{ runner.os }}-venv

  lint:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    defaults:
      run:
        working-directory: ./example-app
    needs: build
    concurrency:
      group: static1
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"

    - name: Install Poetry
      uses: snok/install-poetry@v1

    - name: Cache build venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: /home/runner/.cache/pypoetry/virtualenvs
        key: ${{ runner.os }}-venv

    - name: Lint
      run: |
        poetry run task lint

  formatter:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    needs: build
    concurrency:
      group: static2
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        pip install --upgrade sqlalchemy psycopg2

    - name: Install Poetry
      uses: snok/install-poetry@v1

    - name: Cache build venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: |
            ~/.cache/pypoetry/virtualenvs
        key: ${{ runner.os }}-venv-${{ hashFiles('**/*.toml') }}

    - name: Formatter
      run: |
        poetry run task formatter

  security:
    runs-on: ${{ matrix.os }}
    needs: build
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    concurrency:
      group: static3
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"

    - name: Install Poetry
      uses: snok/install-poetry@v1

    - name: Cache build venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: |
            ~/.cache/pypoetry/virtualenvs
        key: ${{ runner.os }}-venv-${{ hashFiles('**/*.toml') }}

    - name: Security scan
      run: |
        poetry run task security

  test:
    runs-on: ubuntu-latest
    needs: ['lint', 'security', 'formatter']
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"

    - name: Install Poetry
      uses: snok/install-poetry@v1

    - name: Cache build venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: |
            ~/.cache/pypoetry/virtualenvs
        key: ${{ runner.os }}-venv-${{ hashFiles('**/*.toml') }}

    - name: Security scan
      run: |
        poetry run task security

    - name: Run tests
      run: |
        poetry run task test
